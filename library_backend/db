let authors = [
  {
    name: 'Robert Martin',
    id: "afa51ab0-344d-11e9-a414-719c6709cf3e",
    born: 1952,
  },
  {
    name: 'Martin Fowler',
    id: "afa5b6f0-344d-11e9-a414-719c6709cf3e",
    born: 1963
  },
  {
    name: 'Fyodor Dostoevsky',
    id: "afa5b6f1-344d-11e9-a414-719c6709cf3e",
    born: 1821
  },
  { 
    name: 'Joshua Kerievsky', // birthyear not known
    id: "afa5b6f2-344d-11e9-a414-719c6709cf3e",
  },
  { 
    name: 'Sandi Metz', // birthyear not known
    id: "afa5b6f3-344d-11e9-a414-719c6709cf3e",
  },
]

let books = [
  {
    title: 'Clean Code',
    published: 2008,
    author: 'Robert Martin',
    id: "afa5b6f4-344d-11e9-a414-719c6709cf3e",
    genres: ['refactoring']
  },
  {
    title: 'Agile software development',
    published: 2002,
    author: 'Robert Martin',
    id: "afa5b6f5-344d-11e9-a414-719c6709cf3e",
    genres: ['agile', 'patterns', 'design']
  },
  {
    title: 'Refactoring, edition 2',
    published: 2018,
    author: 'Martin Fowler',
    id: "afa5de00-344d-11e9-a414-719c6709cf3e",
    genres: ['refactoring']
  },
  {
    title: 'Refactoring to patterns',
    published: 2008,
    author: 'Joshua Kerievsky',
    id: "afa5de01-344d-11e9-a414-719c6709cf3e",
    genres: ['refactoring', 'patterns']
  },  
  {
    title: 'Practical Object-Oriented Design, An Agile Primer Using Ruby',
    published: 2012,
    author: 'Sandi Metz',
    id: "afa5de02-344d-11e9-a414-719c6709cf3e",
    genres: ['refactoring', 'design']
  },
  {
    title: 'Crime and punishment',
    published: 1866,
    author: 'Fyodor Dostoevsky',
    id: "afa5de03-344d-11e9-a414-719c6709cf3e",
    genres: ['classic', 'crime']
  },
  {
    title: 'The Demon ',
    published: 1872,
    author: 'Fyodor Dostoevsky',
    id: "afa5de04-674d-11e9-a414-719c6709cf3e",
    genres: ['classic', 'revolution']
  },
]



const typeDefs = `
  type Author {
    name: String
    born: String
    bookCountByAuthor: Int
    id: ID
    bookListByAuthor: [bookListByAuthor]
  }

  type bookListByAuthor {
    title: String!
    published: String!
    id: ID,
    genres:[String]
  }

  type Book {
    title: String!
    published: String!
    author: AuthorInfo
    id: ID
    genres: [String]    
  }

  type AuthorInfo {
    id: ID
    name: String,
    born: String,
  }

  type Query {
    bookCount: Int!
    authorCount: Int!
    allBooks(author: InputAuthorInfo, genres: String): [Book!]!
    allAuthors: [Author!]!
  }

  input InputAuthorInfo {
    id: ID
    name: String,
    born: String,
  }

  type Mutation {
    addBook(
      title: String!
      published: String!
      author: InputAuthorInfo
      id: ID
      genres: [String!]!
    ): Book

    editAuthor(
      id: String!
      born: String!
    ): Author,
  }
`
/*
const typeDefs = `
  type Author {
    name: String
    born: String
    bookCountByAuthor: Int
    id: ID
    bookListByAuthor: [bookListByAuthor]
  }

  type bookListByAuthor {
    title: String!
    published: String!
    id: ID,
    genres:[String]
  }

  type Book {
    title: String!
    published: String!
    author: AuthorInfo
    id: ID
    genres: [String]    
  }

  type AuthorInfo {
    id: ID
    name: String,
    born: String,
  }

  type Query {
    bookCount: Int!
    authorCount: Int!
    allBooks(author: InputAuthorInfo, genres: String): [Book!]!
    allAuthors: [Author!]!
  }

  input InputAuthorInfo {
    id: ID
    name: String,
    born: String,
  }

  type Mutation {
    addBook(
      title: String!
      published: String!
      author: InputAuthorInfo
      id: ID
      genres: [String!]!
    ): Book

    editAuthor(
      id: String!
      born: String!
    ): Author,
  }
`




const resolvers = {
  Query: {
    bookCount: async() => await Book.collection.countDocuments(),
    authorCount: async() => await Author.collection.countDocuments(), 
    allAuthors: async() => await Author.find({}),
   // allBooks: async() => await Book.find({}),
    allBooks: async (root, {author, genres}) =>{
      if(author && genres){
        return await Book.find({'author.name': author, genres:{ $in: genres}})
          .populate({
            path: 'author',
            select: 'authors'
          })
      }
      else if(author){
        console.log("author: ", author)
        return await Book.find({'author.name': author})
          .populate({
            path: 'author',
            select: 'authors'
          })
      }
      else if(genres){
        return await Book.find({ genres:{ $in: genres }})
          .populate({
            path: 'author',
            select: 'authors'
          })
      }
      else return await Book.find({})
      .populate({
        path: 'author',
        select: 'authors'
      })
    } 
  },
  Author: {
    bookCountByAuthor: async(root) => await Book.find({'author.name': root.name}).countDocuments(),  
    bookListByAuthor: async(root) => await Book.find({'author.name': root.name})
  },

  Mutation: {
    addBook: async (root, args) => {
      let bookVars
      let authorVars 

      const existAuthor = await Author.findOne({ name: args.author })
      console.log("existAuthor:" ,existAuthor)

      if (existAuthor){
        console.log("it's the same author!")
        authorVars = {
          name: args.author.name,
          born: args.author.born,
        },
        console.log('author already in Database: ', authorVars)
      } else {
        authorVars={
          //id: uuid(),            
          name: args.author.name,
          born: new Date().getFullYear()
        }
        let newAuthor = new Author(authorVars)
        await newAuthor.save().then(res => {
          console.log('new author created & saved! ', res)
          //mongoose.connection.close()
         })
        authors = authors.concat(authorVars)
      }
    
      bookVars = {
        ...args,
        author: authorVars,
       // id: uuid()
      }
      console.log("bookVars: ", bookVars)

      let newBook = new Book(bookVars)
       
        await newBook.save().then(result => {
        console.log('newbook saved! ', result)
        //mongoose.connection.close()
       })
       
        
              const book = {
                ...args,
                id: uuid()
              }
              
              if (!authors.includes(book.author)){
                authors = authors.concat({name:book.author, id:uuid()})
              }
        
       //books = books.concat(bookVars)
       //return bookVars
    },

    editAuthor: async (root, args) => {
      console.log("edit author!")
      console.log("args: ", args)
      /*const target = authors.find(a => a.id === args.id)
      
      if(!target) { 
        console.log('null returned as no target')
        return null 
      }else{
        const updatedAuthor = {...target, born: args.born}

        authors = authors.map(a => a.id === args.id? updatedAuthor : a)
        return updatedAuthor
      
      const author = await Author.findOne({ _id: args.id })
      console.log("author: ", author)
      if(!author){
        return null
      }else{
        author.born = args.born
        try{
           await author.save()
        } catch (error) {
          throw new GraphQLError('saving born failed',{
            extensions: {
              code: 'BAD_USER_INPUT',
              invalidArgs: args.name,
              error
            }
          })
        }
        return author
      }
    }
  },
}

*/